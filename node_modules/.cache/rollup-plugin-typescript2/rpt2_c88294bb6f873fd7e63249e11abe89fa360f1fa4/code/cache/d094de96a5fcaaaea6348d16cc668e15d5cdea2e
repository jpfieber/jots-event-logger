{"code":"import { PluginSettingTab, Setting } from 'obsidian';\r\nexport default class EventLoggerSettingTab extends PluginSettingTab {\r\n    plugin;\r\n    constructor(app, plugin) {\r\n        super(app, plugin);\r\n        this.plugin = plugin;\r\n    }\r\n    display() {\r\n        const { containerEl } = this;\r\n        containerEl.empty();\r\n        containerEl.createEl('h2', { text: 'Event Logger Settings' });\r\n        // Journal Folder Setting\r\n        new Setting(containerEl)\r\n            .setName('Journal Folder')\r\n            .setDesc('Set the location of the main Journal folder.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('Stacks/Journals')\r\n                .setValue(this.plugin.settings.journalFolder || 'Stacks/Journals')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.journalFolder = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Journal Name Format Setting\r\n        new Setting(containerEl)\r\n            .setName('Journal Name Format')\r\n            .setDesc('Set the format of the Journal name, including the subfolder path.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('YYYY/YYYY-MM/YYYY-MM-DD_ddd')\r\n                .setValue(this.plugin.settings.journalNameFormat || 'YYYY/YYYY-MM/YYYY-MM-DD_ddd')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.journalNameFormat = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Event Folder Setting\r\n        new Setting(containerEl)\r\n            .setName('Event Folder')\r\n            .setDesc('Set the location of the main Event folder.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('Stacks/Events')\r\n                .setValue(this.plugin.settings.eventFolder || 'Stacks/Events')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.eventFolder = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Event Name Format Setting\r\n        new Setting(containerEl)\r\n            .setName('Event Name Format')\r\n            .setDesc('Set the format of the Event name, including the subfolder path.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('YYYYMMDD - description')\r\n                .setValue(this.plugin.settings.eventNameFormat || 'YYYYMMDD - description')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.eventNameFormat = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Icon Options Setting\r\n        new Setting(containerEl)\r\n            .setName('Icon Options')\r\n            .setDesc('Set the available icons for Journal events.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('💼,🚹,🚺,👫,🏈,🎈,💦,📚,📆')\r\n                .setValue(this.plugin.settings.iconOptions || '💼,🚹,🚺,👫,🏈,🎈,💦,📚,📆')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.iconOptions = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Journal Prefix Setting\r\n        new Setting(containerEl)\r\n            .setName('String Prefix Letter')\r\n            .setDesc('Set the letter to prefix the string.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('e')\r\n                .setValue(this.plugin.settings.journalPrefix || 'e')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.journalPrefix = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // SVG URI Setting\r\n        new Setting(containerEl)\r\n            .setName('Decorated Task Symbol')\r\n            .setDesc('Set the Data URI for the SVG icon to use before the inserted event string.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('Enter SVG URI')\r\n                .setValue(this.plugin.settings.svgUri || '')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.svgUri = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Event Types Section\r\n        containerEl.createEl('h3', { text: 'Event Types' });\r\n        const eventTypeContainer = containerEl.createEl('div', { cls: 'event-type-container' });\r\n        this.plugin.settings.eventTypes.forEach((eventType, index) => {\r\n            const settingRow = eventTypeContainer.createEl('div', { cls: 'event-type-row' });\r\n            // Display Name Setting\r\n            new Setting(settingRow)\r\n                .setName('Display Name')\r\n                .addText(text => {\r\n                text\r\n                    .setPlaceholder('Enter display name')\r\n                    .setValue(eventType.display || '')\r\n                    .onChange(async (value) => {\r\n                    this.plugin.settings.eventTypes[index].display = value;\r\n                    await this.plugin.saveSettings();\r\n                });\r\n            });\r\n            // Prefix Setting\r\n            new Setting(settingRow)\r\n                .setName('Prefix')\r\n                .addText(text => {\r\n                text\r\n                    .setPlaceholder('Enter prefix')\r\n                    .setValue(eventType.prefix || '')\r\n                    .onChange(async (value) => {\r\n                    this.plugin.settings.eventTypes[index].prefix = value;\r\n                    await this.plugin.saveSettings();\r\n                });\r\n            });\r\n            // Icon Setting\r\n            new Setting(settingRow)\r\n                .setName('Icon')\r\n                .addText(text => {\r\n                text\r\n                    .setPlaceholder('Enter icon')\r\n                    .setValue(eventType.icon || '')\r\n                    .onChange(async (value) => {\r\n                    this.plugin.settings.eventTypes[index].icon = value;\r\n                    await this.plugin.saveSettings();\r\n                });\r\n            });\r\n            // Up, Down, and Remove Buttons\r\n            new Setting(settingRow)\r\n                .addButton(button => button\r\n                .setButtonText('Up')\r\n                .setCta()\r\n                .onClick(async () => {\r\n                if (index > 0) {\r\n                    const temp = this.plugin.settings.eventTypes[index - 1];\r\n                    this.plugin.settings.eventTypes[index - 1] = this.plugin.settings.eventTypes[index];\r\n                    this.plugin.settings.eventTypes[index] = temp;\r\n                    await this.plugin.saveSettings();\r\n                    this.display();\r\n                }\r\n            }))\r\n                .addButton(button => button\r\n                .setButtonText('Down')\r\n                .setCta()\r\n                .onClick(async () => {\r\n                if (index < this.plugin.settings.eventTypes.length - 1) {\r\n                    const temp = this.plugin.settings.eventTypes[index + 1];\r\n                    this.plugin.settings.eventTypes[index + 1] = this.plugin.settings.eventTypes[index];\r\n                    this.plugin.settings.eventTypes[index] = temp;\r\n                    await this.plugin.saveSettings();\r\n                    this.display();\r\n                }\r\n            }))\r\n                .addButton(button => button\r\n                .setButtonText('Remove')\r\n                .setCta()\r\n                .onClick(async () => {\r\n                this.plugin.settings.eventTypes.splice(index, 1);\r\n                await this.plugin.saveSettings();\r\n                this.display();\r\n            }));\r\n        });\r\n        // Add Event Type Button\r\n        new Setting(containerEl)\r\n            .addButton(button => button\r\n            .setButtonText('Add Event Type')\r\n            .setCta()\r\n            .onClick(async () => {\r\n            this.plugin.settings.eventTypes.push({ display: '', prefix: '', icon: '' });\r\n            await this.plugin.saveSettings();\r\n            this.display();\r\n        }));\r\n    }\r\n}\r\n","references":["C:/Users/jpfie/OneDrive/Documents/JOTS/Plugins/jots-event-logger/node_modules/obsidian/obsidian.d.ts","C:/Users/jpfie/OneDrive/Documents/JOTS/Plugins/jots-event-logger/src/main.ts"]}
