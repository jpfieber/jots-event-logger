{"code":"import { Plugin, TFile } from 'obsidian';\r\nimport DateInputModal from './modals/DateInputModal';\r\nimport JournalOnlyModal from './modals/JournalOnlyModal';\r\nimport EventLoggerSettingTab from './settings';\r\nimport moment from 'moment';\r\nconst DEFAULT_SETTINGS = {\r\n    journalFolder: \"Stacks/Journals\",\r\n    journalNameFormat: \"YYYY/YYYY-MM/YYYY-MM-DD_ddd\",\r\n    eventFolder: \"Stacks/Events\",\r\n    eventNameFormat: \"YYYYMMDD - description\",\r\n    iconOptions: '💼,🚹,🚺,👫,🏈,🎈,💦,📚,📆',\r\n    journalPrefix: 'e',\r\n    svgUri: '',\r\n    nestJournalEntries: false,\r\n    eventTypes: []\r\n};\r\nexport default class EventLoggerPlugin extends Plugin {\r\n    settings; // Use non-null assertion operator\r\n    async onload() {\r\n        console.log('Event Logger: Loading plugin');\r\n        await this.loadSettings();\r\n        this.addSettingTab(new EventLoggerSettingTab(this.app, this));\r\n        // Command to create an event with a file\r\n        this.addCommand({\r\n            id: 'create-event-with-file',\r\n            name: 'Create Event in Journal with File',\r\n            callback: () => this.showByDate(true) // Calls showByDate with createEventFile = true\r\n        });\r\n        // Command to create an event in the journal only\r\n        this.addCommand({\r\n            id: 'open-date-input-modal',\r\n            name: 'Create Event in Journal',\r\n            callback: () => this.showJournalOnly() // Calls showJournalOnly\r\n        });\r\n        this.injectCSS();\r\n    }\r\n    onunload() {\r\n        console.log('Event Logger: Unloading plugin');\r\n        this.removeCSS();\r\n    }\r\n    async loadSettings() {\r\n        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\r\n    }\r\n    async saveSettings() {\r\n        await this.saveData(this.settings);\r\n        this.injectCSS();\r\n    }\r\n    injectCSS() {\r\n        const svgUri = this.settings.svgUri;\r\n        const journalPrefix = this.settings.journalPrefix;\r\n        const css = `\n            input[data-task=\"${journalPrefix}\"]:checked,\n            li[data-task=\"${journalPrefix}\"]>input:checked,\n            li[data-task=\"${journalPrefix}\"]>p>input:checked {\n                --checkbox-marker-color: transparent;\n                border: none;\n                border-radius: 0;\n                background-image: none;\n                background-color: currentColor;\n                pointer-events: none;\n                -webkit-mask-size: var(--checkbox-icon);\n                -webkit-mask-position: 50% 50%;\n                color: #13BE55;\n                margin-left: -48px;\n                -webkit-mask-image: url(\"${svgUri}\");\n            }\n\n            body [data-task=\"${journalPrefix}\"]>.dataview.inline-field>.dataview.inline-field-key::after {\n                content: \"=\";\n                color: #13BE55;\n            }\n        `;\r\n        this.removeCSS();\r\n        const style = document.createElement('style');\r\n        style.id = 'event-logger-dynamic-css';\r\n        style.textContent = css;\r\n        document.head.appendChild(style);\r\n    }\r\n    removeCSS() {\r\n        const style = document.getElementById('event-logger-dynamic-css');\r\n        if (style) {\r\n            style.remove();\r\n        }\r\n    }\r\n    async showByDate(createEventFile) {\r\n        await this.loadSettings();\r\n        new DateInputModal(this.app, async ({ description, inputDate, eventType, icon, startTime, endTime, journalPrefix }) => {\r\n            if (description && inputDate && eventType && icon && startTime && endTime) {\r\n                const eventTypeObj = this.settings.eventTypes.find(option => option.display === eventType);\r\n                const prefix = eventTypeObj ? eventTypeObj.prefix : '';\r\n                const formattedString = `- [${journalPrefix}] (time:: ${startTime}) (type:: ${icon}) (event:: [[${moment(inputDate).local().format('YYYYMMDD')} - ${prefix ? `${prefix} -- ` : ''}${description}|${description}]])`;\r\n                await this.addToJournal(inputDate, formattedString);\r\n                if (createEventFile) {\r\n                    console.log('Event Logger: Creating event file...');\r\n                    await this.createEventFile(inputDate, eventType, description, startTime, endTime, prefix);\r\n                }\r\n            }\r\n        }, this.settings).open();\r\n    }\r\n    async showJournalOnly() {\r\n        await this.loadSettings();\r\n        new JournalOnlyModal(this.app, async ({ description, inputDate, icon, startTime, journalPrefix }) => {\r\n            if (description && inputDate && icon && startTime) {\r\n                const formattedString = `- [${journalPrefix}] (time:: ${startTime}) (type:: ${icon}) (event:: ${description})`;\r\n                await this.addToJournal(moment(inputDate).local().format('YYYY-MM-DD'), formattedString);\r\n            }\r\n        }, this.settings).open();\r\n    }\r\n    async addToJournal(inputDate, formattedString) {\r\n        const formattedDate = moment(inputDate).format(this.settings.journalNameFormat);\r\n        const journalPath = `${this.settings.journalFolder}/${formattedDate}.md`;\r\n        const journalFile = await this.app.vault.getAbstractFileByPath(journalPath);\r\n        if (journalFile instanceof TFile) {\r\n            let content = await this.app.vault.read(journalFile);\r\n            content = content.replace(/\\n+$/, '');\r\n            const entryString = this.settings.nestJournalEntries ? `> ${formattedString}` : formattedString;\r\n            await this.app.vault.modify(journalFile, content + '\\n' + entryString);\r\n        }\r\n        else {\r\n            console.log('Event Logger: Journal file not found.');\r\n        }\r\n    }\r\n    async createEventFile(inputDate, eventType, description, startTime, endTime, prefix) {\r\n        console.log('Event Logger: Starting to create event file...');\r\n        const year = moment(inputDate).format('YYYY'); // Extract year\r\n        const yearMonth = moment(inputDate).format('YYYY-MM'); // Extract year and month\r\n        const eventFileName = `${moment(inputDate).format('YYYYMMDD')} - ${prefix ? `${prefix} -- ` : ''}${description}.md`;\r\n        const eventFilePath = `${this.settings.eventFolder}/${year}/${yearMonth}/${eventFileName}`; // Correct folder structure\r\n        const folderPath = eventFilePath.substring(0, eventFilePath.lastIndexOf('/')); // Extract folder path\r\n        const currentDatedTime = this.getCurrentDateTime();\r\n        const eventFileContent = `---\\n\ntype: ${eventType.toLowerCase().replace(/\\s+/g, '').replace(/'/g, '')}\\n\ntitle: ${description}\\n\nstartTime: ${startTime}\\n\nendTime: ${endTime}\\n\ndate: ${inputDate}\\n\nfileClass: Events\\n\ncreated: ${currentDatedTime}\\n\nfilename: ${moment(inputDate).format('YYYYMMDD')} - ${prefix ? `${prefix} -- ` : ''}${description}\\n\nattendees: \\n\nplace: \\n\ndocuments: \\n\n---\\n\\n\n# ${moment(inputDate).format('YYYYMMDD')} - ${description}`;\r\n        // Ensure the folder structure exists\r\n        await this.createFolderRecursively(folderPath);\r\n        // Create the file\r\n        try {\r\n            await this.app.vault.create(eventFilePath, eventFileContent);\r\n            console.log(`Event Logger: Event file successfully created at: ${eventFilePath}`);\r\n        }\r\n        catch (error) {\r\n            console.error(`Event Logger: Failed to create event file. Error: ${error instanceof Error ? error.message : error}`);\r\n        }\r\n    }\r\n    async createFolderRecursively(folderPath) {\r\n        const parts = folderPath.split('/');\r\n        let currentPath = '';\r\n        for (const part of parts) {\r\n            currentPath = currentPath ? `${currentPath}/${part}` : part;\r\n            const folder = this.app.vault.getAbstractFileByPath(currentPath);\r\n            if (!folder) {\r\n                console.log(`Event Logger: Creating folder at ${currentPath}`);\r\n                await this.app.vault.createFolder(currentPath);\r\n            }\r\n        }\r\n    }\r\n    getCurrentDateTime() {\r\n        const now = new Date();\r\n        const offset = -now.getTimezoneOffset();\r\n        const sign = offset >= 0 ? '+' : '-';\r\n        const pad = (num) => String(num).padStart(2, '0');\r\n        const hours = pad(Math.floor(Math.abs(offset) / 60));\r\n        const minutes = pad(Math.abs(offset) % 60);\r\n        const isoString = now.toISOString().replace(/\\.\\d{3}Z$/, '');\r\n        return `${isoString}${sign}${hours}:${minutes}`;\r\n    }\r\n}\r\n","references":["C:/Users/jpfie/Coding/jots-event-logger/node_modules/obsidian/obsidian.d.ts","C:/Users/jpfie/Coding/jots-event-logger/src/modals/DateInputModal.ts","C:/Users/jpfie/Coding/jots-event-logger/src/modals/JournalOnlyModal.ts","C:/Users/jpfie/Coding/jots-event-logger/src/settings.ts","C:/Users/jpfie/Coding/jots-event-logger/node_modules/moment/ts3.1-typings/moment.d.ts"]}
