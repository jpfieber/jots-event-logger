{"code":"import { PluginSettingTab, Setting } from 'obsidian';\r\nexport default class EventLoggerSettingTab extends PluginSettingTab {\r\n    plugin;\r\n    constructor(app, plugin) {\r\n        super(app, plugin);\r\n        this.plugin = plugin;\r\n    }\r\n    display() {\r\n        const { containerEl } = this;\r\n        containerEl.empty();\r\n        containerEl.createEl('h2', { text: 'Event Logger Settings' });\r\n        // Journal Folder Setting\r\n        new Setting(containerEl)\r\n            .setName('Journal Folder')\r\n            .setDesc('Set the location of the main Journal folder.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('Stacks/Journals')\r\n                .setValue(this.plugin.settings.journalFolder || 'Stacks/Journals')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.journalFolder = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Journal Name Format Setting\r\n        new Setting(containerEl)\r\n            .setName('Journal Name Format')\r\n            .setDesc('Set the format of the Journal name, including the subfolder path.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('YYYY/YYYY-MM/YYYY-MM-DD_ddd')\r\n                .setValue(this.plugin.settings.journalNameFormat || 'YYYY/YYYY-MM/YYYY-MM-DD_ddd')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.journalNameFormat = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Event Folder Setting\r\n        new Setting(containerEl)\r\n            .setName('Event Folder')\r\n            .setDesc('Set the location of the main Event folder.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('Stacks/Events')\r\n                .setValue(this.plugin.settings.eventFolder || 'Stacks/Events')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.eventFolder = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Nest Journal Entries Setting\r\n        new Setting(containerEl)\r\n            .setName(\"Nest Journal Entries in Callout\")\r\n            .setDesc(\"When enabled, journal entries will be nested as callouts with a '> ' prefix\")\r\n            .addToggle((toggle) => toggle\r\n            .setValue(this.plugin.settings.nestJournalEntries || false)\r\n            .onChange(async (value) => {\r\n            this.plugin.settings.nestJournalEntries = value;\r\n            await this.plugin.saveSettings();\r\n        }));\r\n        // Event Name Format Setting\r\n        new Setting(containerEl)\r\n            .setName('Event Name Format')\r\n            .setDesc('Set the format of the Event name, including the subfolder path.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('YYYYMMDD - description')\r\n                .setValue(this.plugin.settings.eventNameFormat || 'YYYYMMDD - description')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.eventNameFormat = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Icon Options Setting\r\n        new Setting(containerEl)\r\n            .setName('Icon Options')\r\n            .setDesc('Set the available icons for Journal events.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('💼,🚹,🚺,👫,🏈,🎈,💦,📚,📆')\r\n                .setValue(this.plugin.settings.iconOptions || '💼,🚹,🚺,👫,🏈,🎈,💦,📚,📆')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.iconOptions = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Journal Prefix Setting\r\n        new Setting(containerEl)\r\n            .setName('String Prefix Letter')\r\n            .setDesc('Set the letter to prefix the string.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('e')\r\n                .setValue(this.plugin.settings.journalPrefix || 'e')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.journalPrefix = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // SVG URI Setting\r\n        new Setting(containerEl)\r\n            .setName('Decorated Task Symbol')\r\n            .setDesc('Set the Data URI for the SVG icon to use before the inserted event string.')\r\n            .addText(text => {\r\n            text\r\n                .setPlaceholder('Enter SVG URI')\r\n                .setValue(this.plugin.settings.svgUri || '')\r\n                .onChange(async (value) => {\r\n                this.plugin.settings.svgUri = value;\r\n                await this.plugin.saveSettings();\r\n            });\r\n        });\r\n        // Event Types Section\r\n        containerEl.createEl('h3', { text: 'Event Types' });\r\n        const eventTypeContainer = containerEl.createEl('div', { cls: 'event-type-container' });\r\n        this.plugin.settings.eventTypes.forEach((eventType, index) => {\r\n            const settingRow = eventTypeContainer.createEl('div', { cls: 'event-type-row' });\r\n            // Display Name Setting\r\n            new Setting(settingRow)\r\n                .setName('Display Name')\r\n                .addText(text => {\r\n                text\r\n                    .setPlaceholder('Enter display name')\r\n                    .setValue(eventType.display || '')\r\n                    .onChange(async (value) => {\r\n                    this.plugin.settings.eventTypes[index].display = value;\r\n                    await this.plugin.saveSettings();\r\n                });\r\n            });\r\n            // Prefix Setting\r\n            new Setting(settingRow)\r\n                .setName('Prefix')\r\n                .addText(text => {\r\n                text\r\n                    .setPlaceholder('Enter prefix')\r\n                    .setValue(eventType.prefix || '')\r\n                    .onChange(async (value) => {\r\n                    this.plugin.settings.eventTypes[index].prefix = value;\r\n                    await this.plugin.saveSettings();\r\n                });\r\n            });\r\n            // Icon Setting (Dropdown)\r\n            new Setting(settingRow)\r\n                .setName('Icon')\r\n                .addDropdown(dropdown => {\r\n                const iconOptions = this.plugin.settings.iconOptions.split(','); // Split Icon Options into an array\r\n                iconOptions.forEach(icon => {\r\n                    dropdown.addOption(icon, icon); // Add each icon as an option\r\n                });\r\n                dropdown\r\n                    .setValue(eventType.icon || '') // Set the current value\r\n                    .onChange(async (value) => {\r\n                    this.plugin.settings.eventTypes[index].icon = value;\r\n                    await this.plugin.saveSettings();\r\n                });\r\n            });\r\n            // Up, Down, and Remove Buttons\r\n            new Setting(settingRow)\r\n                .addButton(button => button\r\n                .setIcon(\"arrow-up\") // Up arrow\r\n                .setCta()\r\n                .setTooltip('Move Up')\r\n                .onClick(async () => {\r\n                if (index > 0) {\r\n                    const temp = this.plugin.settings.eventTypes[index - 1];\r\n                    this.plugin.settings.eventTypes[index - 1] = this.plugin.settings.eventTypes[index];\r\n                    this.plugin.settings.eventTypes[index] = temp;\r\n                    await this.plugin.saveSettings();\r\n                    this.display();\r\n                }\r\n            }))\r\n                .addButton(button => button\r\n                .setIcon(\"arrow-down\") // Down arrow\r\n                .setCta()\r\n                .setTooltip('Move Down')\r\n                .onClick(async () => {\r\n                if (index < this.plugin.settings.eventTypes.length - 1) {\r\n                    const temp = this.plugin.settings.eventTypes[index + 1];\r\n                    this.plugin.settings.eventTypes[index + 1] = this.plugin.settings.eventTypes[index];\r\n                    this.plugin.settings.eventTypes[index] = temp;\r\n                    await this.plugin.saveSettings();\r\n                    this.display();\r\n                }\r\n            }))\r\n                .addButton(button => button\r\n                .setIcon(\"trash\") // Trash can\r\n                .setCta()\r\n                .setTooltip('Remove')\r\n                .onClick(async () => {\r\n                this.plugin.settings.eventTypes.splice(index, 1);\r\n                await this.plugin.saveSettings();\r\n                this.display();\r\n            }));\r\n        });\r\n        // Add Event Type Button\r\n        new Setting(containerEl)\r\n            .addButton(button => button\r\n            .setButtonText('Add Event Type')\r\n            .setCta()\r\n            .onClick(async () => {\r\n            this.plugin.settings.eventTypes.push({ display: '', prefix: '', icon: '' });\r\n            await this.plugin.saveSettings();\r\n            this.display();\r\n        }));\r\n        this.addWebsiteSection(containerEl);\r\n        this.addCoffeeSection(containerEl);\r\n    }\r\n    addWebsiteSection(containerEl) {\r\n        const websiteDiv = containerEl.createEl('div', { cls: 'website-section' });\r\n        websiteDiv.style.display = 'flex';\r\n        websiteDiv.style.alignItems = 'center';\r\n        websiteDiv.style.marginTop = '20px';\r\n        websiteDiv.style.marginBottom = '20px';\r\n        websiteDiv.style.padding = '0.5rem';\r\n        websiteDiv.style.opacity = '0.75';\r\n        const logoLink = websiteDiv.createEl('a', {\r\n            href: 'https://jots.life',\r\n        });\r\n        logoLink.setAttr('target', '_blank'); // Set the target attribute explicitly\r\n        const logoImg = logoLink.createEl('img', {\r\n            attr: {\r\n                src: 'https://jots.life/jots-logo-512/',\r\n                alt: 'JOTS Logo',\r\n            },\r\n        });\r\n        logoImg.style.width = '64px';\r\n        logoImg.style.height = '64px';\r\n        logoImg.style.marginRight = '15px';\r\n        websiteDiv.appendChild(logoLink);\r\n        const descriptionDiv = websiteDiv.createEl('div', { cls: 'website-description' });\r\n        descriptionDiv.innerHTML = `\n            While Event Logger works on its own, it is part of a system called \n            <a href=\"https://jots.life\" target=\"_blank\">JOTS</a> that helps capture, organize, \n            and visualize your life's details.\n        `;\r\n        descriptionDiv.style.fontSize = '14px';\r\n        descriptionDiv.style.lineHeight = '1.5';\r\n        descriptionDiv.style.color = '#555';\r\n        websiteDiv.appendChild(descriptionDiv);\r\n        containerEl.appendChild(websiteDiv);\r\n    }\r\n    addCoffeeSection(containerEl) {\r\n        const coffeeDiv = containerEl.createEl('div', { cls: 'buy-me-a-coffee' });\r\n        coffeeDiv.style.marginTop = '20px';\r\n        coffeeDiv.style.textAlign = 'center';\r\n        coffeeDiv.innerHTML = `\n            <a href=\"https://www.buymeacoffee.com/jpfieber\" target=\"_blank\">\n                <img \n                    src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" \n                    alt=\"Buy Me A Coffee\" \n                    style=\"height: 60px; width: 217px;\"\n                />\n            </a>\n        `;\r\n        containerEl.appendChild(coffeeDiv);\r\n    }\r\n}\r\n","references":["C:/Users/jpfie/Coding/jots-event-logger/node_modules/obsidian/obsidian.d.ts","C:/Users/jpfie/Coding/jots-event-logger/src/main.ts"]}
